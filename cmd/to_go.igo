package cmd

import
	"bytes"
	"path/filepath"

	printer "github.com/daddye/igo/to_go"

	"github.com/daddye/igo/ast"
	"github.com/daddye/igo/parser"
	"github.com/daddye/igo/scanner"
	"github.com/daddye/igo/token"

	"io"
	"io/ioutil"
	"os"
	"strings"


var
	igoFileSet     = token.NewFileSet() # per process FileSet
	igoParserMode  parser.Mode
	igoPrinterMode printer.Mode


func igoReport(err error)
	scanner.PrintError(os.Stderr, err)
	exitCode = 2


func igoInitParserMode()
	igoParserMode = parser.Mode(0)
	if *comments
		igoParserMode |= parser.ParseComments


	igoParserMode |= parser.AllErrors


func igoInitPrinterMode()
	igoPrinterMode = printer.UseSpaces
	if *tabIndent
		igoPrinterMode |= printer.TabIndent




func igoProcessFile(filename string, in io.Reader, out io.Writer) error
	dest := strings.TrimSuffix(filename, ".igo") + ".igo.go"

	f, err := os.Open(filename)
	if err != nil
		return err


	defer f.Close()

	src, err := ioutil.ReadAll(f)
	if err != nil
		return err


	file, adjust, err := igoParse(igoFileSet, filename, src)
	if err != nil
		return err


	ast.SortImports(igoFileSet, file)

	var buf bytes.Buffer
	err = (&printer.Config{Mode: igoPrinterMode, Tabwidth: *tabWidth}).Fprint(&buf, igoFileSet, file)
	if err != nil
		return err


	res := buf.Bytes()
	if adjust != nil
		res = adjust(src, res)


	if *destDir != ""
		dest = filepath.Join(*destDir, dest)
		createDir(dest)


	err = ioutil.WriteFile(dest, res, 0644)
	if err != nil
		return err


	return err


func igoFile(f os.FileInfo) bool
	# ignore non-iGo files
	name := f.Name()
	return !f.IsDir() && !strings.HasPrefix(name, ".") && strings.HasSuffix(name, ".igo")


func igoVisitFile(path string, f os.FileInfo, err error) error
	if err == nil && igoFile(f)
		err = igoProcessFile(path, nil, os.Stdout)


	if err != nil
		igoReport(err)


	return nil


func igoWalkPath(path string)
	switch dir, err := os.Stat(path);
		case err != nil:
			igoReport(err)
		case dir.IsDir():
			filepath.Walk(path, igoVisitFile)
		default:
			if err := igoProcessFile(path, nil, os.Stdout); err != nil
				igoReport(err)

			# parse parses src, which was read from filename,
			# as a Go source file or statement list.
func igoParse(fset *token.FileSet, filename string, src []byte) (*ast.File, func(orig, src []byte) []byte, error)
	# Try as whole source file.
	file, err := parser.ParseFile(fset, filename, src, igoParserMode)
	if err == nil
		return file, nil, nil

	# If the error is that the source file didn't begin with a
	# package line and this is standard input, fall through to
	# try as a source fragment.  Stop and return on any other error.
	if !strings.Contains(err.Error(), "expected 'package'")
		return nil, nil, err

	# If this is a declaration list, make it a source file
	# by inserting a package clause.
	# Insert using a ;, not a newline, so that the line numbers
	# in psrc match the ones in src.
	psrc := append([]byte("package p;"), src...)
	file, err = parser.ParseFile(fset, filename, psrc, igoParserMode)
	if err == nil
		adjust := func(orig, src []byte) []byte
			# Remove the package clause.
			# Gofmt has turned the ; into a \n.
			src = src[len("package p\n"):]
			return matchSpace(orig, src)


		return file, adjust, nil

	# If the error is that the source file didn't begin with a
	# declaration, fall through to try as a statement list.
	# Stop and return on any other error.
	if !strings.Contains(err.Error(), "expected declaration")
		return nil, nil, err

	# Failed, and out of options.
	return nil, nil, err

