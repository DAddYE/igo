# Copyright 2010 The Go Authors. All rights reserved.
# Use of this source code is governed by a BSD-style
# license that can be found in the LICENSE file.

# TODO(gri) consider making this a separate package outside the go directory.

package token

import
	"fmt"
	"sort"
	"sync"

# -----------------------------------------------------------------------------
# Positions

# Position describes an arbitrary source position
# including the file, line, and column location.
# A Position is valid if the line number is > 0.
#
type Position struct
	Filename string # filename, if any
	Offset   int    # offset, starting at 0
	Line     int    # line number, starting at 1
	Column   int    # column number, starting at 1 (character count)

# IsValid returns true if the position is valid.
func *Position.IsValid() bool
	return self.Line > 0

# String returns a string in one of several forms:
#
#	file:line:column    valid position with file name
#	line:column         valid position without file name
#	file                invalid position with file name
#	-                   invalid position without file name
#
func Position.String() string
	s := self.Filename
	if self.IsValid()
		if s != ""
			s += ":"

		s += fmt.Sprintf("%d:%d", self.Line, self.Column)

	if s == ""
		s = "-"

	return s

# Pos is a compact encoding of a source position within a file set.
# It can be converted into a Position for a more convenient, but much
# larger, representation.
#
# The Pos value for a given file is a number in the range [base, base+size],
# where base and size are specified when adding the file to the file set via
# AddFile.
#
# To create the Pos value for a specific source offset, first add
# the respective file to the current file set (via FileSet.AddFile)
# and then call File.Pos(offset) for that file. Given a Pos value p
# for a specific file set fset, the corresponding Position value is
# obtained by calling fset.Position(p).
#
# Pos values can be compared directly with the usual comparison operators:
# If two Pos values p and q are in the same file, comparing p and q is
# equivalent to comparing the respective source file offsets. If p and q
# are in different files, p < q is true if the file implied by p was added
# to the respective file set before the file implied by q.
#
type Pos int

# The zero value for Pos is NoPos; there is no file and line information
# associated with it, and NoPos().IsValid() is false. NoPos is always
# smaller than any other Pos value. The corresponding Position value
# for NoPos is the zero value for Position.
#
const NoPos Pos = 0

# IsValid returns true if the position is valid.
func Pos.IsValid() bool
	return self != NoPos

# -----------------------------------------------------------------------------
# File

# A File is a handle for a file belonging to a FileSet.
# A File has a name, size, and line offset table.
#
type File struct
	set  *FileSet
	name string # file name as provided to AddFile
	base int    # Pos value range for this file is [base...base+size]
	size int    # file size as provided to AddFile

	# lines and infos are protected by set.mutex
	lines []int
	infos []lineInfo

# Name returns the file name of file f as registered with AddFile.
func *File.Name() string
	return self.name

# Base returns the base offset of file f as registered with AddFile.
func *File.Base() int
	return self.base

# Size returns the size of file f as registered with AddFile.
func *File.Size() int
	return self.size

# LineCount returns the number of lines in file f.
func *File.LineCount() int
	self.set.mutex.RLock()
	n := len(self.lines)
	self.set.mutex.RUnlock()
	return n

# AddLine adds the line offset for a new line.
# The line offset must be larger than the offset for the previous line
# and smaller than the file size; otherwise the line offset is ignored.
#
func *File.AddLine(offset int)
	self.set.mutex.Lock()
	if i := len(self.lines); (i == 0 || self.lines[i-1] < offset) && offset < self.size
		self.lines = append(self.lines, offset)

	self.set.mutex.Unlock()

# SetLines sets the line offsets for a file and returns true if successful.
# The line offsets are the offsets of the first character of each line;
# for instance for the content "ab\nc\n" the line offsets are {0, 3}.
# An empty file has an empty line offset table.
# Each line offset must be larger than the offset for the previous line
# and smaller than the file size; otherwise SetLines fails and returns
# false.
#
func *File.SetLines(lines []int) bool
	# verify validity of lines table
	size := self.size
	for i, offset := range lines
		if i > 0 && offset <= lines[i-1] || size <= offset
			return false

		# set lines table
	self.set.mutex.Lock()
	self.lines = lines
	self.set.mutex.Unlock()
	return true

# SetLinesForContent sets the line offsets for the given file content.
func *File.SetLinesForContent(content []byte)
	var lines []int
	line := 0
	for offset, b := range content
		if line >= 0
			lines = append(lines, line)

		line = -1
		if b == '\n'
			line = offset + 1

		# set lines table
	self.set.mutex.Lock()
	self.lines = lines
	self.set.mutex.Unlock()

# A lineInfo object describes alternative file and line number
# information (such as provided via a //line comment in a .go
# file) for a given file offset.
type lineInfo struct

# fields are exported to make them accessible to gob
	Offset   int
	Filename string
	Line     int

# AddLineInfo adds alternative file and line number information for
# a given file offset. The offset must be larger than the offset for
# the previously added alternative line info and smaller than the
# file size; otherwise the information is ignored.
#
# AddLineInfo is typically used to register alternative position
# information for //line filename:line comments in source files.
#
func *File.AddLineInfo(offset int, filename string, line int)
	self.set.mutex.Lock()
	if i := len(self.infos); i == 0 || self.infos[i-1].Offset < offset && offset < self.size
		self.infos = append(self.infos, lineInfo{offset, filename, line})

	self.set.mutex.Unlock()

# Pos returns the Pos value for the given file offset;
# the offset must be <= f.Size().
# f.Pos(f.Offset(p)) == p.
#
func *File.Pos(offset int) Pos
	if offset > self.size
		panic("illegal file offset")

	return Pos(self.base + offset)

# Offset returns the offset for the given file position p;
# p must be a valid Pos value in that file.
# f.Offset(f.Pos(offset)) == offset.
#
func *File.Offset(p Pos) int
	if int(p) < self.base || int(p) > self.base+self.size
		panic("illegal Pos value")

	return int(p) - self.base

# Line returns the line number for the given file position p;
# p must be a Pos value in that file or NoPos.
#
func *File.Line(p Pos) int
	# TODO(gri) this can be implemented much more efficiently
	return self.Position(p).Line

func searchLineInfos(a []lineInfo, x int) int
	return sort.Search(len(a)) do(i int) bool
		return a[i].Offset > x
	 - 1

# info returns the file name, line, and column number for a file offset.
func *File.info(offset int) (filename string, line, column int)
	filename = self.name
	if i := searchInts(self.lines, offset); i >= 0
		line, column = i+1, offset-self.lines[i]+1

	if len(self.infos) > 0
		# almost no files have extra line infos
		if i := searchLineInfos(self.infos, offset); i >= 0
			alt := &self.infos[i]
			filename = alt.Filename
			if i := searchInts(self.lines, alt.Offset); i >= 0
				line += alt.Line - i - 1

	return

func *File.position(p Pos) (pos Position)
	offset := int(p) - self.base
	pos.Offset = offset
	pos.Filename, pos.Line, pos.Column = self.info(offset)
	return

# Position returns the Position value for the given file position p;
# p must be a Pos value in that file or NoPos.
#
func *File.Position(p Pos) (pos Position)
	if p != NoPos
		if int(p) < self.base || int(p) > self.base+self.size
			panic("illegal Pos value")

		pos = self.position(p)

	return

# -----------------------------------------------------------------------------
# FileSet

# A FileSet represents a set of source files.
# Methods of file sets are synchronized; multiple goroutines
# may invoke them concurrently.
#
type FileSet struct
	mutex sync.RWMutex # protects the file set
	base  int          # base offset for the next file
	files []*File      # list of files in the order added to the set
	last  *File        # cache of last file looked up

# NewFileSet creates a new file set.
func NewFileSet() *FileSet
	return &FileSet{
		base: 1, # 0 == NoPos
	}

# Base returns the minimum base offset that must be provided to
# AddFile when adding the next file.
#
func *FileSet.Base() int
	self.mutex.RLock()
	b := self.base
	self.mutex.RUnlock()
	return b

# AddFile adds a new file with a given filename, base offset, and file size
# to the file set s and returns the file. Multiple files may have the same
# name. The base offset must not be smaller than the FileSet's Base(), and
# size must not be negative.
#
# Adding the file will set the file set's Base() value to base + size + 1
# as the minimum base value for the next file. The following relationship
# exists between a Pos value p for a given file offset offs:
#
#	int(p) = base + offs
#
# with offs in the range [0, size] and thus p in the range [base, base+size].
# For convenience, File.Pos may be used to create file-specific position
# values from a file offset.
#
func *FileSet.AddFile(filename string, base, size int) *File
	self.mutex.Lock()
	defer self.mutex.Unlock()
	if base < self.base || size < 0
		panic("illegal base or size")

	# base >= s.base && size >= 0
	f := &File{self, filename, base, size, []int{0}, nil}
	base += size + 1 # +1 because EOF also has a position
	if base < 0
		panic("token.Pos offset overflow (> 2G of source code in file set)")

	# add the file to the file set
	self.base = base
	self.files = append(self.files, f)
	self.last = f
	return f

# Iterate calls f for the files in the file set in the order they were added
# until f returns false.
#
func *FileSet.Iterate(f func(*File) bool)
	for i := 0; ; i++
		var file *File
		self.mutex.RLock()
		if i < len(self.files)
			file = self.files[i]

		self.mutex.RUnlock()
		if file == nil || !f(file)
			break

func searchFiles(a []*File, x int) int
	return sort.Search(len(a)) do(i int) bool
		return a[i].base > x
	 - 1

func *FileSet.file(p Pos) *File
	self.mutex.RLock()
	# common case: p is in last file
	if f := self.last; f != nil && f.base <= int(p) && int(p) <= f.base+f.size
		self.mutex.RUnlock()
		return f

	# p is not in last file - search all files
	if i := searchFiles(self.files, int(p)); i >= 0
		f := self.files[i]
		# f.base <= int(p) by definition of searchFiles
		if int(p) <= f.base+f.size
			self.mutex.RUnlock()
			self.mutex.Lock()
			self.last = f # race is ok - s.last is only a cache
			self.mutex.Unlock()
			return f

	self.mutex.RUnlock()
	return nil

# File returns the file that contains the position p.
# If no such file is found (for instance for p == NoPos),
# the result is nil.
#
func *FileSet.File(p Pos) (f *File)
	if p != NoPos
		f = self.file(p)

	return

# Position converts a Pos in the fileset into a general Position.
func *FileSet.Position(p Pos) (pos Position)
	if p != NoPos
		if f := self.file(p); f != nil
			pos = f.position(p)

	return

# -----------------------------------------------------------------------------
# Helper functions

func searchInts(a []int, x int) int
	# This function body is a manually inlined version of:
	#
	#   return sort.Search(len(a), func(i int) bool { return a[i] > x }) - 1
	#
	# With better compiler optimizations, this may not be needed in the
	# future, but at the moment this change improves the go/printer
	# benchmark performance by ~30%. This has a direct impact on the
	# speed of gofmt and thus seems worthwhile (2011-04-29).
	# TODO(gri): Remove this when compilers have caught up.
	i, j := 0, len(a)
	for i < j
		h := i + (j-i)/2 # avoid overflow when computing h
		# i ≤ h < j
		if a[h] <= x
			i = h + 1
		else
			j = h

	return i - 1

